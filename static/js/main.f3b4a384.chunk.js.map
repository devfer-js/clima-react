{"version":3,"sources":["components/Header.jsx","components/Formulario.jsx","components/Error.jsx","components/Clima.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Formulario","datosConsulta","useState","ciudad","pais","busqueda","guardarBusqueda","handleChange","e","target","name","value","onSubmit","preventDefault","type","id","onChange","htmlFor","Error","mensaje","Clima","resultado","main","console","log","parseInt","temp","temp_max","temp_min","App","componente","guardarCiudad","guardarPais","error","guardarError","guardarResultado","useEffect","a","url","fetch","respuesta","json","consultarAPI","cod","datos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3b4a384.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = ({ titulo }) => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper light-blue darken-2\">\r\n                <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react'\r\n\r\nconst Formulario = ({datosConsulta}) => {\r\n    const [busqueda, guardarBusqueda] = useState({\r\n        ciudad: '',\r\n        pais: ''\r\n    });\r\n\r\n    const handleChange = e => {\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    const consultarClima = e => {\r\n        e.preventDefault();\r\n        datosConsulta(busqueda);\r\n    };\r\n\r\nreturn (\r\n        <form onSubmit={consultarClima}>\r\n            <div className=\"input-field col s12\">\r\n                <input type=\"text\" name=\"ciudad\" id=\"ciudad\" onChange={handleChange} />\r\n                <label htmlFor=\"ciudad\">Ciudad</label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12\">\r\n                <select name=\"pais\" onChange={handleChange}>\r\n                    <option value=\"\">Selecciona un pais</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"BO\">Bolivia</option>\r\n                    <option value=\"MX\">Mexico</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"CO\">Colombia</option>\r\n                    <option value=\"CR\">Costa Rica</option>\r\n                    <option value=\"PE\">Peru</option>\r\n                </select>\r\n                <label htmlFor=\"ciudad\">Ciudad</label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n                <input type=\"submit\" className=\"waves-effect waves-light btn-large btn-block yellow accent-4\" value=\"Buscar Clima\" />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\n\r\nfunction Error ({mensaje}) {\r\n    return (\r\n        <div className='card-panel red darken-4 error col s12'>\r\n            {mensaje}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error","import React from 'react';\r\n\r\nconst Clima = ({resultado}) => {\r\n    const {name, main} = resultado;\r\n    if(!name) return  null;\r\n    const kelvin = 273.15;\r\n\r\n    console.log(resultado);\r\n    return (\r\n        <div className='card-panel white col s12'>\r\n            <div className=\"black-text\">\r\n                <h2>El clima de {name} es:</h2>\r\n                <p className=\"temperatura\">{parseInt(main.temp - kelvin, 10)} <span>&#x2103;</span></p>\r\n                <p>Maxima Temperatura: {parseInt(main.temp_max - kelvin, 10)} &#x2103;</p>\r\n                <p>Minima Temperatura: {parseInt(main.temp_min - kelvin, 10)}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Clima;","import React,{useState, useEffect} from 'react';\nimport Header from './components/Header';\nimport Formulario from \"./components/Formulario\";\nimport Error from \"./components/Error\";\nimport Clima from \"./components/Clima\";\n\nfunction App() {\n    const [ciudad, guardarCiudad] = useState('');\n    const [pais, guardarPais] = useState('');\n    const [error, guardarError] =  useState(false);\n    const [resultado, guardarResultado] = useState({})\n\n    useEffect(() => {\n        // prevenir ejecucion\n        if(ciudad === '') return;\n        const consultarAPI = async () => {\n            const appId = \"2afdac2b2726ea02be006b6843f2396f\";\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n            const respuesta = await fetch(url);\n            const resultado = await respuesta.json();\n            guardarResultado(resultado);\n        };\n        consultarAPI();\n    }, [ciudad, pais]);\n\n    const datosConsulta = datos => {\n        //validar que ambos campos esten\n        if (datos.ciudad === '' || datos.pais === ''){\n            guardarError(true);\n            return;\n        }\n        guardarCiudad(datos.ciudad);\n        guardarPais(datos.pais);\n        guardarError(false);\n    };\n\n    let componente;\n\n    if(error) {\n        componente = <Error mensaje='ambos campos son obligatorios' />\n    }else if (resultado.cod == \"404\"){\n        componente = <Error mensaje='La ciudad no existe en nuestro registro' />\n    }\n    else {\n        componente = <Clima resultado={resultado}/>;\n    }\n\n  return (\n    <div className=\"app\">\n      <Header titulo=\"Clima react App\" />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s12 m6\">\n              <Formulario datosConsulta = {datosConsulta}/>\n            </div>\n              <div className=\"col s12 m6\">\n                  {componente}\n              </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}